generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  issues        Issue[]
  // assigned      Assigned[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Issue {
  id          String    @id @default(uuid())
  name        String
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  // assigned    Assigned[]
  description String
  category    Int
  issueType   Int
  priority    Int
  createdAt   DateTime  @default(now())
}

// model Assigned {
//   id          String    @id @default(uuid())
//   issueId     String
//   issue       Issue     @relation(fields: [issueId], references: [id])
//   userId      String
//   user        User      @relation(fields: [userId], references: [id])
// }